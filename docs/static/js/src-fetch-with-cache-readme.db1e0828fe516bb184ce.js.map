{"version":3,"sources":["/Users/jz/shuyun/shuyun-ep-utils/src/fetch-with-cache/README.mdx"],"names":["layoutProps","MDXLayout","MDXContent","_ref","components","props","Object","_Users_jz_shuyun_shuyun_ep_utils_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_0__","_mdx_js_react__WEBPACK_IMPORTED_MODULE_2__","assign","mdxType","id","parentName","className","isMDXComponent"],"mappings":"qXAWMA,EAAc,GAGdC,EAAY,UACH,SAASC,EAATC,GAGZ,IAFDC,EAECD,EAFDC,WACGC,EACFC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,gBACD,OAAOG,OAAAE,EAAA,EAAAF,CAACL,EAADK,OAAAG,OAAA,GAAeT,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYM,QAAQ,cAC5EJ,OAAAE,EAAA,EAAAF,CAAA,KAAQ,CACNK,GAAM,2BADR,2BAGAL,OAAAE,EAAA,EAAAF,CAAA,KAAQ,CACNK,GAAM,QADR,QAGAL,OAAAE,EAAA,EAAAF,CAAA,SAAGA,OAAAE,EAAA,EAAAF,CAAA,cAAYM,WAAW,KAAvB,2BAAH,6CAAiFN,OAAAE,EAAA,EAAAF,CAAA,cAAYM,WAAW,KAAvB,uBAAjF,8UACAN,OAAAE,EAAA,EAAAF,CAAA,KAAQ,CACNK,GAAM,OADR,OAGAL,OAAAE,EAAA,EAAAF,CAAA,gMAAqCA,OAAAE,EAAA,EAAAF,CAAA,cAAYM,WAAW,KAAvB,uCAArC,giBACAN,OAAAE,EAAA,EAAAF,CAAA,KAAQ,CACNK,GAAM,QADR,QAGAL,OAAAE,EAAA,EAAAF,CAAA,sMAAsCA,OAAAE,EAAA,EAAAF,CAAA,cAAYM,WAAW,KAAvB,SAAtC,8LACAN,OAAAE,EAAA,EAAAF,CAAA,KAAQ,CACNK,GAAM,OADR,OAGAL,OAAAE,EAAA,EAAAF,CAAA,WAAKA,OAAAE,EAAA,EAAAF,CAAA,OAAAA,OAAAG,OAAA,CAAMG,WAAW,OAAU,CAC5BC,UAAa,wBADZ,0iBAqBLP,OAAAE,EAAA,EAAAF,CAAA,KAAQ,CACNK,GAAM,cADR,cAGAL,OAAAE,EAAA,EAAAF,CAAA,SAAGA,OAAAE,EAAA,EAAAF,CAAA,cAAYM,WAAW,KAAvB,2BAAH,+DACCN,OAAAE,EAAA,EAAAF,CAAA,cAAYM,WAAW,KAAvB,SADD,yDAC+DN,OAAAE,EAAA,EAAAF,CAAA,cAAYM,WAAW,KAAvB,kBAD/D,2BACiIN,OAAAE,EAAA,EAAAF,CAAA,cAAYM,WAAW,KAAvB,kBADjI,oBAECN,OAAAE,EAAA,EAAAF,CAAA,cAAYM,WAAW,KAAvB,SAFD,6CAGCN,OAAAE,EAAA,EAAAF,CAAA,cAAYM,WAAW,KAAvB,UAHD,4BAG4DN,OAAAE,EAAA,EAAAF,CAAA,cAAYM,WAAW,KAAvB,OAH5D,gCAICN,OAAAE,EAAA,EAAAF,CAAA,cAAYM,WAAW,KAAvB,OAJD,oDAI6DN,OAAAE,EAAA,EAAAF,CAAA,cAAYM,WAAW,KAAvB,OAJ7D,kNASJV,EAAWY,gBAAiB","file":"static/js/src-fetch-with-cache-readme.11e1afdd.js","sourcesContent":["/* @jsx mdx */\n  import React from 'react'\n  import { mdx } from '@mdx-js/react'\n  /* @jsx mdx */\n\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h1 {...{\n      \"id\": \"fetchwithcachegenerator\"\n    }}>{`fetchWithCacheGenerator`}</h1>\n    <h2 {...{\n      \"id\": \"what\"\n    }}>{`What`}</h2>\n    <p><inlineCode parentName=\"p\">{`fetchWithCacheGenerator`}</inlineCode>{`函数是带缓存的`}<inlineCode parentName=\"p\">{`Promise实例`}</inlineCode>{`生成器。通常用来实现接口缓存，当请求过一个资源后再次请求将会返回之前的结果。下面文档中都以请求接口的场景描述。`}</p>\n    <h2 {...{\n      \"id\": \"why\"\n    }}>{`Why`}</h2>\n    <p>{`很多时候我们需要在同一个或者不同模块请求同一个资源，比如指定`}<inlineCode parentName=\"p\">{`数据模型(DataModel)`}</inlineCode>{`的详细信息，如果每次都重新请求是一件开销很大的行为。如果需要对数据模型的字段进行深度遍历请求所有的引用模型时，可能会存在循环引用的情况，此时如果不设置缓存机制将会形成接口无限请求。`}</p>\n    <h2 {...{\n      \"id\": \"when\"\n    }}>{`When`}</h2>\n    <p>{`一般来说只有对相对不经常会变更的资源才适合使用该函数，且传入的`}<inlineCode parentName=\"p\">{`fetch`}</inlineCode>{`方法必须不会对资源造成副作用，换句话说该操作对于资源是幂等的。`}</p>\n    <h2 {...{\n      \"id\": \"how\"\n    }}>{`How`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`import { fetchWithCacheGenerator } from '@shuyun-ep-team/utils/es/fetch-with-cache';\n\n\n/**\n * 请求指定DataModel的详细数据\n * @params fqn string 数据模型的唯一标识，将会被作为缓存的 key 值\n */\nconst fetchDataModel = (fqn) => fetch(\\`/metadata/v1/types/\\${fqn}\\`);\n\n\nconst {\n  fetch: fetchDataModelWithCache,\n  clear,\n  remove,\n  has\n} = fetchWithCacheGenerator(fetchDataModel);\n\n  fetchDataModelWithCache(\\`data.mdm.User\\`);\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"interfaces\"\n    }}>{`Interfaces`}</h2>\n    <p><inlineCode parentName=\"p\">{`fetchWithCacheGenerator`}</inlineCode>{` 函数返回以下几个值\n1. `}<inlineCode parentName=\"p\">{`fetch`}</inlineCode>{`是包裹了缓存机制的`}<inlineCode parentName=\"p\">{`fetchDataModel`}</inlineCode>{`，参数与`}<inlineCode parentName=\"p\">{`fetchDataModel`}</inlineCode>{`一致\n2. `}<inlineCode parentName=\"p\">{`clear`}</inlineCode>{` 清除所有缓存\n3. `}<inlineCode parentName=\"p\">{`remove`}</inlineCode>{` 删除指定`}<inlineCode parentName=\"p\">{`key`}</inlineCode>{`值的缓存\n4. `}<inlineCode parentName=\"p\">{`has`}</inlineCode>{` 判断是否包含指定`}<inlineCode parentName=\"p\">{`key`}</inlineCode>{`值的缓存`}</p>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;\n  "],"sourceRoot":""}