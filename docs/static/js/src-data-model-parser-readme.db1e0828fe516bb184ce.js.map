{"version":3,"sources":["/Users/jz/shuyun/shuyun-ep-utils/src/data-model/parser/README.mdx"],"names":["layoutProps","MDXLayout","MDXContent","_ref","components","props","Object","_Users_jz_shuyun_shuyun_ep_utils_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_0__","_mdx_js_react__WEBPACK_IMPORTED_MODULE_2__","assign","mdxType","id","parentName","href","className","isMDXComponent"],"mappings":"sXAWMA,EAAc,GAGdC,EAAY,UACH,SAASC,EAATC,GAGZ,IAFDC,EAECD,EAFDC,WACGC,EACFC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,gBACD,OAAOG,OAAAE,EAAA,EAAAF,CAACL,EAADK,OAAAG,OAAA,GAAeT,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYM,QAAQ,cAC5EJ,OAAAE,EAAA,EAAAF,CAAA,KAAQ,CACNK,GAAM,wBADR,wBAGAL,OAAAE,EAAA,EAAAF,CAAA,KAAQ,CACNK,GAAM,QADR,QAGAL,OAAAE,EAAA,EAAAF,CAAA,SAAGA,OAAAE,EAAA,EAAAF,CAAA,cAAYM,WAAW,KAAvB,wBAAH,8IAA+FN,OAAAE,EAAA,EAAAF,CAAA,cAAYM,WAAW,KAAvB,YAA/F,qEAAkKN,OAAAE,EAAA,EAAAF,CAAA,cAAYM,WAAW,KAAvB,UAAlK,SAAyNN,OAAAE,EAAA,EAAAF,CAAA,cAAYM,WAAW,KAAvB,iBAAzN,0DAAgSN,OAAAE,EAAA,EAAAF,CAAA,IAAAA,OAAAG,OAAA,CAAGG,WAAW,KAAQ,CAClTC,KAAQ,uBADoR,2BAAhS,WAE2CP,OAAAE,EAAA,EAAAF,CAAA,IAAAA,OAAAG,OAAA,CAAGG,WAAW,KAAQ,CAC7DC,KAAQ,qCAD+B,2BAF3C,uBAKAP,OAAAE,EAAA,EAAAF,CAAA,KAAQ,CACNK,GAAM,OADR,OAGAL,OAAAE,EAAA,EAAAF,CAAA,qXACAA,OAAAE,EAAA,EAAAF,CAAA,KAAQ,CACNK,GAAM,QADR,QAGAL,OAAAE,EAAA,EAAAF,CAAA,6MACAA,OAAAE,EAAA,EAAAF,CAAA,KAAQ,CACNK,GAAM,OADR,OAGAL,OAAAE,EAAA,EAAAF,CAAA,WAAKA,OAAAE,EAAA,EAAAF,CAAA,OAAAA,OAAAG,OAAA,CAAMG,WAAW,OAAU,CAC5BE,UAAa,wBADZ,qqBAkBTZ,EAAWa,gBAAiB","file":"static/js/src-data-model-parser-readme.25636c39.js","sourcesContent":["/* @jsx mdx */\n  import React from 'react'\n  import { mdx } from '@mdx-js/react'\n  /* @jsx mdx */\n\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h1 {...{\n      \"id\": \"calculatemodelfields\"\n    }}>{`calculateModelFields`}</h1>\n    <h2 {...{\n      \"id\": \"what\"\n    }}>{`What`}</h2>\n    <p><inlineCode parentName=\"p\">{`calculateModelFields`}</inlineCode>{` 是一个数据模型字段解析函数，该函数以数据模型的`}<inlineCode parentName=\"p\">{`response`}</inlineCode>{`作为参数，返回该模型的`}<inlineCode parentName=\"p\">{`fields`}</inlineCode>{`和`}<inlineCode parentName=\"p\">{`derivedFields`}</inlineCode>{`。该函数通常会配合 `}<a parentName=\"p\" {...{\n        \"href\": \"../fetch/README.md\"\n      }}>{`DataModelFetchGenerator`}</a>{` 或 `}<a parentName=\"p\" {...{\n        \"href\": \"../../fetch-with-cache/README.md\"\n      }}>{`fetchWithCacheGenerator`}</a>{` 使用。`}</p>\n    <h2 {...{\n      \"id\": \"why\"\n    }}>{`Why`}</h2>\n    <p>{`在不同的应用系统中都可能会需要解析指定数据模型的字段和衍生字段，为了保证处理上的一致性和可维护性，所以统一提供该工具类。`}</p>\n    <h2 {...{\n      \"id\": \"when\"\n    }}>{`When`}</h2>\n    <p>{`在任何子应用中如果需要解析指定数据模型的字段都建议使用该工具类。`}</p>\n    <h2 {...{\n      \"id\": \"how\"\n    }}>{`How`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`import { calculateModelFields } from '@shuyun-ep-team/utils/es/data-model/parser';\n\n\nconst dataModelFetchService = new DataModelFetchGenerator(fetchDataModel);\n\ndataModelFetchService.fetch(\\`data.mdm.User\\`).then(dataModelResponse =>{\n\n    // fields 为普通字段和引用字段的集合\n    // derivedFields 为衍生字段的集合\n    const {fields, derivedFields} = calculateModelFields(dataModelResponse);\n});\n`}</code></pre>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;\n  "],"sourceRoot":""}